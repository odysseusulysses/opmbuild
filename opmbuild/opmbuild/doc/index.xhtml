<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
        <link rel="stylesheet" type="text/css" href="css/common.css" />
        <title>OPM Builder</title>
    </head>
    <body>
        <div id="wrapper">
            <div id="header">OPM Builder</div>
            <ul id="nav">
                <li><a href="index.xhtml">Introduction</a></li>
                <li><a href="install.xhtml">Installation</a></li>
                <li><a href="manual.xhtml">Manual</a></li>
                <li><a href="examples.xhtml">Examples</a></li>
                <li><a href="apidocs/index.html">JavaDoc</a></li>
            </ul>
            <div id="content" class="clearfix">
                <div id="col_1">
                    <h2>Introduction</h2>
                    <ul id="subnav">
                        <li><a href = "index.xhtml">Summary</a></li>
                        <li><a href = "opm-intro.xhtml">OPM</a></li>
                    </ul>
                </div>
                <div id="col_2">
                    <h1>OPM Builder</h1>
                    <p>
                        OPM Builder is a library for creating, manipulating, and navigating OPM graphs within memory in Java programs.
                        OPM Builder aims to have the following properties.
                        <ul>
                            <li><i>Convenience</i>: The API aims to be easy to use, in particular by allowing OPM graphs, whether to be stored or communicated, to be built iteratively.  It further aims for programs written using the API to be easy to understand.</li>
                            <li><i>Constancy</i>: As the OPM model or any particular serialisation of it evolve, the OPM Builder API will not change in ways which break existing programs, but instead add functionality and deprecate obsolete methods or classes before removal.</li>
                            <li><i>Collections-based</i>: The API aims to be familiar to Jave programmers by using the appropriate standard Collection APIs whenever a collection is modelled.</li>
                            <li><i>Convention</i>: Where a varaiable has an obvious default value, can be auto-generated or retrieved from elsewhere, OPM Builder aims to do this instead of requiring the user to provide such data.</li>
                            <li><i>Conversion</i>: OPM Builder aims not to be tied to a particular serialisation or version of a seralisation, and to allow serialisation and deserialisation from different formats and conversion between two versions of one format.</li>
                        </ul>
                    </p>
                </div>
            </div>
            <div id="footer"><small>
                    Layout by <a href="http://www.free-css.com/" target="_blank">Free CSS.com</a></small></div>
        </div>

    </body>
</html>
